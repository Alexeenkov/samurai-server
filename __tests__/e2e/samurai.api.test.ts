import request from 'supertest';import app from '../../src';import {HTTP_STATUSES} from "../../src/constants/http-statuses";import {ISamurai, ISamuraiWithId} from "../../src/interfaces";import {ROUTERS} from "../../src/constants/routers";const getRequest = () => {    return request(app);};describe(ROUTERS.samurai, () => {    let createdSamurai: ISamuraiWithId | null = null;    let secondCreatedSamurai: ISamuraiWithId | null = null;    beforeAll(async () => {        await getRequest()            .delete(`${ROUTERS.testing}/data`)            .expect(HTTP_STATUSES.NO_CONTENT);    });    it(`Should return code ${HTTP_STATUSES.OK} and an empty array`, async () => {        await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK, []);    });    it(`Should return ${HTTP_STATUSES.NOT_FOUND} code for non-existent samurai`, async () => {        await getRequest()            .get(`${ROUTERS.samurai}/1`)            .expect(HTTP_STATUSES.NOT_FOUND);    });    it(`Should return code ${HTTP_STATUSES.BAD_REQUEST} and not create a samurai without age`, async () => {        await getRequest()            .post(ROUTERS.samurai)            .send({ name: 'Dju-won' })            .expect(HTTP_STATUSES.BAD_REQUEST)    });    it(`Should return code ${HTTP_STATUSES.OK} and an empty array`, async () => {        await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK, []);    });    it(`Should return code ${HTTP_STATUSES.NOT_FOUND} and not create a samurai with empty values`, async () => {        await getRequest()            .post(ROUTERS.samurai)            .send({ name: '', age: '' })            .expect(HTTP_STATUSES.BAD_REQUEST)    });    it(`Should return code ${HTTP_STATUSES.OK} and empty array`, async () => {        await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK, []);    });    it(`Should create a samurai with valid data, return code ${HTTP_STATUSES.CREATED} with created samurai`, async () => {        const data: ISamurai = {            name: 'Test-name',            age: 99,        }        const createResponse = await getRequest()            .post(ROUTERS.samurai)            .send(data)            .expect(HTTP_STATUSES.CREATED);        createdSamurai = createResponse.body;        expect(createdSamurai).toEqual({            id: expect.any(Number),            name: 'Test-name',            age: 99,        } as ISamuraiWithId);        await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK, [createdSamurai]);    });    it(`Should update a samurai with valid data, return code ${HTTP_STATUSES.OK} with updated samurai`, async () => {        if (!createdSamurai) {            expect(true).toBe(false);        }        const data: ISamurai = {            name: 'Good name',            age: 11,        };        const createResponse = await getRequest()            .put(`${ROUTERS.samurai}/${createdSamurai!.id}`)            .send(data)            .expect(HTTP_STATUSES.OK);        const updatedSamurai = createResponse.body;        expect(updatedSamurai).toEqual({            id: createdSamurai!.id,            name: 'Good name',            age: 11,        } as ISamuraiWithId);        await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK, [updatedSamurai]);    });    it(`Should return code ${HTTP_STATUSES.BAD_REQUEST} with empty data`, async () => {        if (!createdSamurai) {            expect(true).toBe(false);        }        await getRequest()            .put(`${ROUTERS.samurai}/${createdSamurai!.id}`)            .send({ name: '', age: 0 })            .expect(HTTP_STATUSES.BAD_REQUEST);    });    it(`Should return code ${HTTP_STATUSES.BAD_REQUEST} without name`, async () => {        if (!createdSamurai) {            expect(true).toBe(false);        }        await getRequest()            .put(`${ROUTERS.samurai}/${createdSamurai!.id}`)            .send({ age: 44 })            .expect(HTTP_STATUSES.BAD_REQUEST);    });    it(`Should return code ${HTTP_STATUSES.BAD_REQUEST} without age`, async () => {        if (!createdSamurai) {            expect(true).toBe(false);        }        await getRequest()            .put(`${ROUTERS.samurai}/${createdSamurai!.id}`)            .send({ name: 'Test-name' })            .expect(HTTP_STATUSES.BAD_REQUEST);    });    it(`Should return code ${HTTP_STATUSES.OK} and array with updated samurai`, async () => {        const createResponse = await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK);        const currentSamurai = createResponse.body;        expect(currentSamurai).toEqual([{            id: createdSamurai!.id,            name: 'Good name',            age: 11,        }] as ISamuraiWithId[]);    });    it(`Should create a second samurai, return code ${HTTP_STATUSES.CREATED} with created samurai`, async () => {        if (!createdSamurai) {            expect(true).toBe(false);        }        const data: ISamurai = {            name: 'Second samurai',            age: 22,        };        const createResponse = await getRequest()            .post(ROUTERS.samurai)            .send(data)            .expect(HTTP_STATUSES.CREATED);        secondCreatedSamurai = createResponse.body;        expect(secondCreatedSamurai).toEqual({            id: expect.any(Number),            name: 'Second samurai',            age: 22,        } as ISamuraiWithId);        await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK, [                {                    id: createdSamurai!.id,                    name: 'Good name',                    age: 11,                },                secondCreatedSamurai,            ] as ISamuraiWithId[]);    });    it('Should successfully remove samurai by sent id', async () => {        if (!createdSamurai) {            expect(true).toBe(false);        }        await getRequest()            .delete(`${ROUTERS.samurai}/${createdSamurai!.id}`)            .expect(`"Samurai ${createdSamurai!.id} successfully removed"`);        const createResponse = await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK);        const currentSamurai = createResponse.body;        expect(currentSamurai).toEqual([secondCreatedSamurai]);    });    it(`Should return code ${HTTP_STATUSES.NOT_FOUND} and not remove samurai by sent id`, async () => {        await getRequest()            .delete(`${ROUTERS.samurai}/-100`)            .expect(HTTP_STATUSES.NOT_FOUND, `"Samurai -100 does not exist"`);        const createResponse = await getRequest()            .get(ROUTERS.samurai)            .expect(HTTP_STATUSES.OK);        const currentSamurai = createResponse.body;        expect(currentSamurai).toEqual([secondCreatedSamurai]);    });});