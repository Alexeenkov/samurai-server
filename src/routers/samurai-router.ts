import {Request, Response, Router} from "express";import {HTTP_STATUSES} from "../constants/http-statuses";import {    IDataBase,    ISamurai,    ISamuraiWithId,    RequestWithBody,    RequestWithPathParams,    RequestWithPathParamsAndBody,} from "../interfaces";import {    CreateSamuraiModel,    IdPathParamsModel,    UpdateSamuraiModel,} from "../models";export const getSamuraiRouter = (db: IDataBase) => {    const router = Router({});    router.get('/', (_: Request, res: Response<ISamurai[]>) => {        res            .status(HTTP_STATUSES.OK)            .json(db.samurai);    });    router.get('/:id', (req: RequestWithPathParams<IdPathParamsModel>, res: Response<ISamurai>) => {        const foundSamurai = db.samurai.find((it) => it.id === +req.params.id);        if (!foundSamurai) {            res.sendStatus(HTTP_STATUSES.NOT_FOUND);            return;        }        res.json(foundSamurai);    });    router.post('/', (req: RequestWithBody<CreateSamuraiModel>, res: Response<ISamurai>) => {        if (!req.body.name || !req.body.age) {            res.sendStatus(HTTP_STATUSES.BAD_REQUEST);            return;        }        const newSamurai: ISamuraiWithId = {            id: new Date().getTime(),            name: req.body.name,            age: req.body.age,        }        db.samurai.push(newSamurai);        res.status(HTTP_STATUSES.CREATED).json(newSamurai);    });    router.delete('/:id', (req: RequestWithPathParams<IdPathParamsModel>, res: Response) => {        const lengthOld = db.samurai.length;        db.samurai = db.samurai.filter((it) => it.id !== +req.params.id);        if (db.samurai.length === lengthOld) {            res.status(HTTP_STATUSES.NOT_FOUND).json(`Samurai ${req.params.id} does not exist`);            return;        }        res.json(`Samurai ${req.params.id} successfully removed`);    });    router.put('/:id', (req: RequestWithPathParamsAndBody<IdPathParamsModel, UpdateSamuraiModel>, res: Response<ISamurai>) => {        if (!req.body.name || !req.body.age) {            res.sendStatus(HTTP_STATUSES.BAD_REQUEST);            return;        }        const foundSamuraiIndex = db.samurai.findIndex((it) => it.id === +req.params.id);        if (foundSamuraiIndex < 0) {            res.sendStatus(HTTP_STATUSES.NOT_FOUND);            return;        }        db.samurai[foundSamuraiIndex] = {            id: +req.params.id,            name: req.body.name,            age: req.body.age,        };        res.status(HTTP_STATUSES.OK).json(db.samurai[foundSamuraiIndex]);    });    return router;}