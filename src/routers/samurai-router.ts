import {Request, Response, Router} from "express";import {HTTP_STATUSES} from "../constants/http-statuses";import {db} from "../mocks/db";import {ISamurai} from "../types";export const samuraiRouter = Router({});samuraiRouter.get('/', (_: Request, res: Response) => {    res        .status(HTTP_STATUSES.OK)        .json(db.samurai);});samuraiRouter.get('/:id', (req: Request, res: Response) => {    const foundSamurai = db.samurai.find((it) => it.id === +req.params.id);    if (!foundSamurai) {        res.sendStatus(HTTP_STATUSES.NOT_FOUND);        return;    }    res.json(foundSamurai);});samuraiRouter.post('/', (req: Request, res: Response) => {    if (!req.body.name || !req.body.age) {        res.sendStatus(HTTP_STATUSES.BAD_REQUEST);        return;    }    const newSamurai: ISamurai = {        id: new Date().getTime(),        name: req.body.name,        age: req.body.age,    }    db.samurai.push(newSamurai);    res.status(HTTP_STATUSES.CREATED).json(newSamurai);});samuraiRouter.delete('/:id', (req: Request, res: Response) => {    const lengthOld = db.samurai.length;    db.samurai = db.samurai.filter((it) => it.id !== +req.params.id);    if (db.samurai.length === lengthOld) {        res.status(HTTP_STATUSES.NOT_FOUND).json(`Samurai ${req.params.id} does not exist`);        return;    }    res.json(`Samurai ${req.params.id} successfully removed`);});samuraiRouter.put('/:id', (req: Request, res: Response) => {    if (!req.body.name || !req.body.age) {        res.sendStatus(HTTP_STATUSES.BAD_REQUEST);        return;    }    const foundSamuraiIndex = db.samurai.findIndex((it) => it.id === +req.params.id);    if (foundSamuraiIndex < 0) {        res.sendStatus(HTTP_STATUSES.NOT_FOUND);        return;    }    db.samurai[foundSamuraiIndex] = {        id: +req.params.id,        name: req.body.name,        age: req.body.age,    };    res.status(HTTP_STATUSES.OK).json(db.samurai[foundSamuraiIndex]);});